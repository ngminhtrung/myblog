---
import type { HTMLAttributes } from 'astro/types';

type Props = HTMLAttributes<'a'>;

const { href = '/', class: className, ...props } = Astro.props;
const basePath = import.meta.env.BASE_URL;
const baseNormalized = basePath.endsWith('/') ? basePath.slice(0, -1) : basePath;

const isExternalLink =
	typeof href === 'string' &&
	(/^(?:[a-z]+:)?\/\//i.test(href) || href.startsWith('mailto:') || href.startsWith('tel:'));

const normalizeRoute = (value: string) => {
	if (!value) return '/';
	if (/^(?:[a-z]+:)?\/\//i.test(value) || value.startsWith('mailto:') || value.startsWith('tel:')) {
		return value;
	}
	const ensured = value.startsWith('/') ? value : `/${value}`;
	return ensured === '//' ? '/' : ensured;
};

const routePath = normalizeRoute(href as string);

let currentPath = Astro.url.pathname;
if (baseNormalized && currentPath.startsWith(baseNormalized)) {
	currentPath = currentPath.slice(baseNormalized.length);
}
if (!currentPath.startsWith('/')) {
	currentPath = `/${currentPath}`;
}
if (currentPath === '') {
	currentPath = '/';
}

const resolvedHref = isExternalLink ? routePath : `${basePath}${routePath.replace(/^\//, '')}`;
const isActive =
	!isExternalLink &&
	(currentPath === routePath || (routePath !== '/' && currentPath.startsWith(`${routePath}/`)));
---

<a href={resolvedHref} class:list={[className, { active: isActive }]} {...props}>
	<slot />
</a>
<style>
	a {
		display: inline-block;
		text-decoration: none;
	}
	a.active {
		font-weight: bolder;
		text-decoration: underline;
	}
</style>
